#!/usr/bin/env python3
"""
Version Control Github (VCG)

–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
—Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path
from typing import List, Optional, Tuple
import json
from datetime import datetime

class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

class VCGSystem:
    def __init__(self):
        self.config_file = '.vcg_config.json'
        self.load_config()
    
    def load_config(self):
        self.config = {
            'auto_push': True,
            'default_remote': 'origin',
            'default_branch': 'main',
            'editor': os.getenv('EDITOR', 'nano')
        }
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    self.config.update(json.load(f))
            except:
                pass
    
    def save_config(self):
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f, indent=2)
    
    def print_banner(self):
        banner = f"""
{Colors.PURPLE}{Colors.BOLD}
‚ï¶  ‚ï¶‚ïî‚ïê‚ïó‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ï¶ ‚ï¶  ‚ïî‚ïê‚ïó‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ï¶ ‚ï¶‚ïî‚ïê‚ïó
‚ïë  ‚ïë‚ï†‚ïê‚ï£‚ïë‚ïë‚ïë‚ï†‚ïê‚ï£‚ïö‚ï¶‚ïù  ‚ïë ‚ïë ‚ïë ‚ïë ‚ïë‚ïë‚ïë‚ïë‚ïî‚ïê‚ïù
‚ï©‚ïê‚ïù‚ï©‚ï© ‚ï©‚ï© ‚ï©‚ï© ‚ï© ‚ï©   ‚ïö‚ïê‚ïù ‚ï© ‚ïö‚ïê‚ïù‚ïö‚ï©‚ïù‚ïö‚ïê‚ïù
                        
        Version Control Github
      –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Git
{Colors.END}"""
        print(banner)
    
    def run_git_command(self, command: List[str], capture_output: bool = False) -> Tuple[bool, str]:
        try:
            if capture_output:
                result = subprocess.run(['git'] + command, 
                                      capture_output=True, 
                                      text=True, 
                                      check=True)
                return True, result.stdout.strip()
            else:
                subprocess.run(['git'] + command, check=True)
                return True, ""
        except subprocess.CalledProcessError as e:
            return False, e.stderr if capture_output else str(e)
    
    def check_git_repo(self) -> bool:
        return os.path.exists('.git')
    
    def ensure_repo(self):
        if not self.check_git_repo():
            self.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...", "error")
            success, msg = self.run_git_command(['init'])
            if success:
                self.log("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "success")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {msg}", "error")
                sys.exit(1)
    
    def log(self, message: str, level: str = "info"):
        colors = {
            "info": Colors.BLUE,
            "success": Colors.GREEN,
            "warning": Colors.YELLOW,
            "error": Colors.RED,
            "debug": Colors.CYAN
        }
        icons = {
            "info": "‚ÑπÔ∏è",
            "success": "‚úÖ",
            "warning": "‚ö†Ô∏è",
            "error": "‚ùå",
            "debug": "üêõ"
        }
        print(f"{colors.get(level, '')}{icons.get(level, '')} {message}{Colors.END}")
    
    def init_repo(self, remote_url: str = None):
        self.ensure_repo()
        
        if remote_url:
            success, msg = self.run_git_command(['remote', 'add', 'origin', remote_url])
            if success:
                self.log(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {remote_url}", "success")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è remote: {msg}", "error")
        
        self.log("üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "success")
    
    def status(self):
        self.ensure_repo()
        self.log("üìä –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", "info")
        success, msg = self.run_git_command(['status', '-s'], capture_output=True)
        if success:
            if msg:
                print(msg)
            else:
                self.log("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞", "success")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {msg}", "error")
    
    def add_files(self, files: List[str] = None):
        self.ensure_repo()
        
        if not files:
            files = ['.']
        
        for file_pattern in files:
            success, msg = self.run_git_command(['add', file_pattern])
            if success:
                if file_pattern == '.':
                    self.log("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ stage", "success")
                else:
                    self.log(f"‚úÖ –§–∞–π–ª(—ã) '{file_pattern}' –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ stage", "success")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è '{file_pattern}': {msg}", "error")
    
    def commit(self, message: str = None, amend: bool = False):
        self.ensure_repo()
        
        if not message:
            message = f"–ê–≤—Ç–æ-–∫–æ–º–º–∏—Ç {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        command = ['commit', '-m', message]
        if amend:
            command.append('--amend')
        
        success, msg = self.run_git_command(command)
        if success:
            self.log(f"‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: {message}", "success")
            
            if self.config['auto_push']:
                self.push()
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞: {msg}", "error")
    
    def quick_commit(self, message: str):
        self.add_files(['.'])
        self.commit(message)
    
    def create_branch(self, branch_name: str, switch: bool = True):
        self.ensure_repo()
        
        success, msg = self.run_git_command(['branch', branch_name])
        if success:
            self.log(f"‚úÖ –í–µ—Ç–∫–∞ '{branch_name}' —Å–æ–∑–¥–∞–Ω–∞", "success")
            
            if switch:
                self.switch_branch(branch_name)
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏: {msg}", "error")
    
    def switch_branch(self, branch_name: str, create: bool = False):
        self.ensure_repo()
        
        command = ['checkout', branch_name]
        if create:
            command.insert(1, '-b')
        
        success, msg = self.run_git_command(command)
        if success:
            action = "—Å–æ–∑–¥–∞–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if create else "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
            self.log(f"‚úÖ –í–µ—Ç–∫–∞ '{branch_name}' {action}", "success")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Ç–∫–∏: {msg}", "error")
    
    def list_branches(self):
        self.ensure_repo()
        
        self.log("üåø –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ç–∫–∏:", "info")
        success, msg = self.run_git_command(['branch', '-a'], capture_output=True)
        if success:
            current_branch = None
            for line in msg.split('\n'):
                if line.startswith('*'):
                    current_branch = line[1:].strip()
                    print(f"{Colors.GREEN}* {current_branch}{Colors.END}")
                else:
                    print(f"  {line.strip()}")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–µ—Ç–æ–∫: {msg}", "error")
    
    def merge_branch(self, branch_name: str, no_ff: bool = False):
        self.ensure_repo()
        
        command = ['merge', branch_name]
        if no_ff:
            command.append('--no-ff')
        
        success, msg = self.run_git_command(command)
        if success:
            self.log(f"‚úÖ –í–µ—Ç–∫–∞ '{branch_name}' —É—Å–ø–µ—à–Ω–æ —Å–º–µ—Ä–∂–µ–Ω–∞", "success")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–ª–∏—è–Ω–∏—è: {msg}", "error")
    
    def pull(self, rebase: bool = False):
        self.ensure_repo()
        
        command = ['pull']
        if rebase:
            command.append('--rebase')
        
        success, msg = self.run_git_command(command)
        if success:
            self.log("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ", "success")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ pull: {msg}", "error")
    
    def push(self, branch: str = None, force: bool = False):
        self.ensure_repo()
        
        if not branch:
            success, current_branch = self.run_git_command(
                ['branch', '--show-current'], 
                capture_output=True
            )
            if success:
                branch = current_branch
            else:
                branch = self.config['default_branch']
        
        command = ['push']
        if force:
            command.append('--force')
        command.extend([self.config['default_remote'], branch])
        
        success, msg = self.run_git_command(command)
        if success:
            self.log(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ {self.config['default_remote']}/{branch}", "success")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ push: {msg}", "error")
    
    def show_log(self, graph: bool = False, oneline: bool = False):
        self.ensure_repo()
        
        command = ['log']
        if graph and oneline:
            command.extend(['--graph', '--oneline', '--all'])
        elif graph:
            command.extend(['--graph', '--all'])
        elif oneline:
            command.append('--oneline')
        
        success, msg = self.run_git_command(command, capture_output=True)
        if success:
            if msg:
                print(msg)
            else:
                self.log("üì≠ –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –ø—É—Å—Ç–∞", "info")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {msg}", "error")
    
    def stash_changes(self, message: str = None):
        self.ensure_repo()
        
        command = ['stash', 'push']
        if message:
            command.extend(['-m', message])
        
        success, msg = self.run_git_command(command)
        if success:
            self.log("üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stash", "success")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ stash: {msg}", "error")
    
    def pop_stash(self):
        self.ensure_repo()
        
        success, msg = self.run_git_command(['stash', 'pop'])
        if success:
            self.log("üì§ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ stash", "success")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ pop stash: {msg}", "error")
    
    def set_upstream(self, branch: str = None):
        self.ensure_repo()
        
        if not branch:
            success, current_branch = self.run_git_command(
                ['branch', '--show-current'], 
                capture_output=True
            )
            if success:
                branch = current_branch
        
        success, msg = self.run_git_command(
            ['push', '--set-upstream', self.config['default_remote'], branch]
        )
        if success:
            self.log(f"‚úÖ Upstream —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤–µ—Ç–∫–∏ {branch}", "success")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ upstream: {msg}", "error")

def main():
    vcg = VCGSystem()
    vcg.print_banner()
    
    parser = argparse.ArgumentParser(
        description='Version Control Github - –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Git',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""
{Colors.BOLD}–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:{Colors.END}
  {sys.argv[0]} init                          # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
  {sys.argv[0]} status                        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  {sys.argv[0]} add                           # –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã
  {sys.argv[0]} commit -m "–°–æ–æ–±—â–µ–Ω–∏–µ"         # –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç
  {sys.argv[0]} quick "–°–æ–æ–±—â–µ–Ω–∏–µ"             # –ë—ã—Å—Ç—Ä—ã–π –∫–æ–º–º–∏—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  {sys.argv[0]} branch create new-feature     # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
  {sys.argv[0]} branch switch main            # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É
  {sys.argv[0]} branch list                   # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ç–∫–∏
  {sys.argv[0]} log --graph                   # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å –≥—Ä–∞—Ñ–æ–º
  {sys.argv[0]} push                          # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
  {sys.argv[0]} pull --rebase                 # –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å rebase

{Colors.BOLD}–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:{Colors.END}
  1. {Colors.CYAN}git.py status{Colors.END}                    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
  2. {Colors.CYAN}git.py add{Colors.END}                       - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã
  3. {Colors.CYAN}git.py commit -m "–æ–ø–∏—Å–∞–Ω–∏–µ"{Colors.END}      - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç
  4. {Colors.CYAN}git.py push{Colors.END}                      - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–ö–æ–º–∞–Ω–¥—ã')
    
    # Init command
    init_parser = subparsers.add_parser('init', help='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π')
    init_parser.add_argument('--remote', help='URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è')
    
    # Status command
    subparsers.add_parser('status', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è')
    
    # Add command
    add_parser = subparsers.add_parser('add', help='–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –≤ stage')
    add_parser.add_argument('files', nargs='*', default=['.'], help='–§–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    
    # Commit command
    commit_parser = subparsers.add_parser('commit', help='–°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç')
    commit_parser.add_argument('-m', '--message', required=True, help='–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞')
    commit_parser.add_argument('--amend', action='store_true', help='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç')
    
    # Quick commit command
    quick_parser = subparsers.add_parser('quick', help='–ë—ã—Å—Ç—Ä—ã–π –∫–æ–º–º–∏—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    quick_parser.add_argument('message', help='–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞')
    
    # Branch commands
    branch_parser = subparsers.add_parser('branch', help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∞–º–∏')
    branch_subparsers = branch_parser.add_subparsers(dest='branch_command', help='–ö–æ–º–∞–Ω–¥—ã –≤–µ—Ç–æ–∫')
    
    branch_create_parser = branch_subparsers.add_parser('create', help='–°–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É')
    branch_create_parser.add_argument('name', help='–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏')
    branch_create_parser.add_argument('--no-switch', action='store_true', help='–ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É')
    
    branch_switch_parser = branch_subparsers.add_parser('switch', help='–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É')
    branch_switch_parser.add_argument('name', help='–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏')
    branch_switch_parser.add_argument('--create', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    
    branch_subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ç–∫–∏')
    
    # Merge command
    merge_parser = subparsers.add_parser('merge', help='–°–ª–∏—Ç—å –≤–µ—Ç–∫—É')
    merge_parser.add_argument('branch', help='–í–µ—Ç–∫–∞ –¥–ª—è —Å–ª–∏—è–Ω–∏—è')
    merge_parser.add_argument('--no-ff', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å fast-forward')
    
    # Log command
    log_parser = subparsers.add_parser('log', help='–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤')
    log_parser.add_argument('--graph', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ')
    log_parser.add_argument('--oneline', action='store_true', help='–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥')
    
    # Push command
    push_parser = subparsers.add_parser('push', help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')
    push_parser.add_argument('--branch', help='–í–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    push_parser.add_argument('--force', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞')
    
    # Pull command
    pull_parser = subparsers.add_parser('pull', help='–ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')
    pull_parser.add_argument('--rebase', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å rebase')
    
    # Stash commands
    stash_parser = subparsers.add_parser('stash', help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ stash')
    stash_parser.add_argument('--message', help='–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è stash')
    
    pop_parser = subparsers.add_parser('pop', help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ stash')
    
    # Upstream command
    upstream_parser = subparsers.add_parser('upstream', help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å upstream')
    upstream_parser.add_argument('--branch', help='–í–µ—Ç–∫–∞ –¥–ª—è upstream')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        if args.command == 'init':
            vcg.init_repo(args.remote)
        
        elif args.command == 'status':
            vcg.status()
        
        elif args.command == 'add':
            vcg.add_files(args.files)
        
        elif args.command == 'commit':
            vcg.commit(args.message, args.amend)
        
        elif args.command == 'quick':
            vcg.quick_commit(args.message)
        
        elif args.command == 'branch':
            if args.branch_command == 'create':
                vcg.create_branch(args.name, not args.no_switch)
            elif args.branch_command == 'switch':
                vcg.switch_branch(args.name, args.create)
            elif args.branch_command == 'list':
                vcg.list_branches()
            else:
                branch_parser.print_help()
        
        elif args.command == 'merge':
            vcg.merge_branch(args.branch, args.no_ff)
        
        elif args.command == 'log':
            vcg.show_log(args.graph, args.oneline)
        
        elif args.command == 'push':
            vcg.push(args.branch, args.force)
        
        elif args.command == 'pull':
            vcg.pull(args.rebase)
        
        elif args.command == 'stash':
            vcg.stash_changes(args.message)
        
        elif args.command == 'pop':
            vcg.pop_stash()
        
        elif args.command == 'upstream':
            vcg.set_upstream(args.branch)
        
        else:
            parser.print_help()
    
    except KeyboardInterrupt:
        vcg.log("\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "warning")
    except Exception as e:
        vcg.log(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "error")

if __name__ == '__main__':
    main()