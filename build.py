#!/usr/bin/env python3
"""
OSDev Build System 

OSCRIPTUM

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ö—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏–∏ x86_64
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ ISO –æ–±—Ä–∞–∑–æ–≤
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ QEMU
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏
- –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –û–°
"""

import os
import sys
import subprocess
from pathlib import Path
import argparse
import shutil
import time
import json
from datetime import datetime
from typing import List, Dict, Optional, Tuple
from enum import Enum, auto
import readline
import glob

# === üîß –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: –∏–º–µ–Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (–±–∞–∑–æ–≤—ã–µ, –ë–ï–ó –∂—ë—Å—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏ –û–°) ===
KERNEL_SRC = 'kernel.c'
BOOT_ASM = 'boot.S'
LINKER_SCRIPT = 'link.ld'
GRUB_CONFIG = 'grub.cfg'


class LogLevel(Enum):
    DEBUG = auto()
    INFO = auto()
    WARNING = auto()
    ERROR = auto()
    CRITICAL = auto()


class Color:
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    DARKCYAN = '\033[36m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'


class OSConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –û–°
        self.NAME = "OS"
        self.VERSION = "0.0.1"
        self.AUTHOR = "Anonymous OSDev"
        self.DESCRIPTION = "A simple 64-bit OS that prints 'ABC 64 BIT'"
        self.BUILD_DATE = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ ---
        self.ELF_KERNEL = f'{self.NAME.lower()}.elf'
        self.BIN_KERNEL = f'{self.NAME.lower()}.bin'
        self.ISO_OUTPUT = f'{self.NAME.lower()}.iso'

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.ARCH = 'x86_64'
        self.TARGET = 'x86_64-elf'
        self.CC = f'{self.TARGET}-gcc'
        self.LD = f'{self.TARGET}-ld'
        self.OBJCOPY = f'{self.TARGET}-objcopy'
        self.GRUB_FILE = 'grub-file'
        self.GRUB_MKRESCUE = 'grub-mkrescue'
        
        # –§–ª–∞–≥–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        self.CFLAGS = '-ffreestanding -O2 -Wall -Wextra -std=gnu11 -mno-red-zone -fno-stack-protector -fno-pic'
        self.LDFLAGS = '-nostdlib'
        self.INCLUDES = ['include']
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º
        self.SOURCE_DIRS = ['src']
        
        # –ü—É—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.BUILD_DIR = 'build'
        self.BIN_DIR = 'bin'
        self.DEMO_ISO_DIR = 'demo_iso'
        self.ISO_DIR = 'isodir'
        self.GRUB_CFG = f'src/{GRUB_CONFIG}'
        self.TREE_FILE = 'OS-TREE.txt'

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ QEMU
        self.QEMU_CMD = 'qemu-system-x86_64'
        self.QEMU_MEMORY = '512M'
        self.QEMU_AUDIO = False
        self.QEMU_SERIAL = True
        self.QEMU_CLEAN_AFTER_RUN = False
        self.QEMU_GDB_PORT = 1234

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GRUB
        self.GRUB_TIMEOUT = 10
        self.GRUB_DEFAULT = 0
        self.GRUB_MENU_COLORS = {
            'normal': 'white/black',
            'highlight': 'black/light-gray'
        }

    def get_kernel_output(self) -> str:
        return f'{self.BIN_DIR}/{self.ELF_KERNEL}'

    def get_kernel_binary(self) -> str:
        return f'{self.BIN_DIR}/{self.BIN_KERNEL}'

    def get_iso_image(self, versioned: bool = False) -> str:
        if versioned:
            timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
            return f'{self.DEMO_ISO_DIR}/{self.NAME.lower()}-v{self.VERSION}-{timestamp}.iso'
        return f'{self.BIN_DIR}/{self.ISO_OUTPUT}'

    def load_config(self, config_file: str = 'os_config.json') -> None:
        if not os.path.exists(config_file):
            self.create_default_config(config_file)
        try:
            with open(config_file, 'r') as f:
                config_data = json.load(f)
                for key, value in config_data.items():
                    if hasattr(self, key):
                        if key in ['QEMU_AUDIO', 'QEMU_SERIAL', 'QEMU_CLEAN_AFTER_RUN']:
                            value = str(value).lower() in ('true', '1', 't', 'y', 'yes')
                        setattr(self, key, value)
                self._update_dynamic_names()
            self.log(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_file}", LogLevel.INFO)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", LogLevel.ERROR)

    def save_config(self, config_file: str = 'os_config.json') -> None:
        config_data = {
            'NAME': self.NAME,
            'VERSION': self.VERSION,
            'AUTHOR': self.AUTHOR,
            'DESCRIPTION': self.DESCRIPTION,
            'ARCH': self.ARCH,
            'TARGET': self.TARGET,
            'CFLAGS': self.CFLAGS,
            'LDFLAGS': self.LDFLAGS,
            'QEMU_MEMORY': self.QEMU_MEMORY,
            'QEMU_AUDIO': self.QEMU_AUDIO,
            'QEMU_SERIAL': self.QEMU_SERIAL,
            'QEMU_CLEAN_AFTER_RUN': self.QEMU_CLEAN_AFTER_RUN,
            'GRUB_TIMEOUT': self.GRUB_TIMEOUT,
            'GRUB_DEFAULT': self.GRUB_DEFAULT,
            'GRUB_MENU_COLORS': self.GRUB_MENU_COLORS
        }
        try:
            with open(config_file, 'w') as f:
                json.dump(config_data, f, indent=4)
            self.log(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_file}", LogLevel.INFO)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", LogLevel.ERROR)

    def create_default_config(self, config_file: str = 'os_config.json') -> None:
        default_config = {
            'NAME': 'OS',
            'VERSION': '0.0.1',
            'AUTHOR': 'Anonymous OSDev',
            'DESCRIPTION': 'A simple 64-bit OS that prints \'ABC 64 BIT\'',
            'ARCH': 'x86_64',
            'TARGET': 'x86_64-elf',
            'CFLAGS': '-ffreestanding -O2 -Wall -Wextra -std=gnu11 -mno-red-zone -fno-stack-protector -fno-pic',
            'LDFLAGS': '-nostdlib',
            'QEMU_MEMORY': '512M',
            'QEMU_AUDIO': False,
            'QEMU_SERIAL': True,
            'QEMU_CLEAN_AFTER_RUN': False,
            'GRUB_TIMEOUT': 0,
            'GRUB_DEFAULT': 0,
            'GRUB_MENU_COLORS': {
                'normal': 'white/black',
                'highlight': 'black/light-gray'
            }
        }
        try:
            with open(config_file, 'w') as f:
                json.dump(default_config, f, indent=4)
            self.log(f"–°–æ–∑–¥–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: {config_file}", LogLevel.INFO)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è os_config.json: {e}", LogLevel.ERROR)

    def _update_dynamic_names(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ NAME"""
        self.ELF_KERNEL = f'{self.NAME.lower()}.elf'
        self.BIN_KERNEL = f'{self.NAME.lower()}.bin'
        self.ISO_OUTPUT = f'{self.NAME.lower()}.iso'

    def edit_config_interactive(self) -> None:
        print(f"{Color.BOLD}{Color.CYAN}–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –û–°{Color.END}")
        print(f"{Color.YELLOW}–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ{Color.END}")

        config_items = [
            ('NAME', '–ò–º—è –û–°', str),
            ('VERSION', '–í–µ—Ä—Å–∏—è –û–°', str),
            ('AUTHOR', '–ê–≤—Ç–æ—Ä', str),
            ('DESCRIPTION', '–û–ø–∏—Å–∞–Ω–∏–µ', str),
            ('ARCH', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', str),
            ('TARGET', '–¶–µ–ª–µ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', str),
            ('QEMU_MEMORY', '–ü–∞–º—è—Ç—å QEMU (–Ω–∞–ø—Ä–∏–º–µ—Ä, 512M)', str),
            ('QEMU_AUDIO', '–ó–≤—É–∫ –≤ QEMU (y/n)', lambda x: x.lower() in ('y', 'yes')),
            ('QEMU_SERIAL', '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –≤ QEMU (y/n)', lambda x: x.lower() in ('y', 'yes')),
            ('QEMU_CLEAN_AFTER_RUN', '–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ QEMU (y/n)', lambda x: x.lower() in ('y', 'yes')),
            ('GRUB_TIMEOUT', '–¢–∞–π–º–∞—É—Ç –º–µ–Ω—é GRUB (—Å–µ–∫, -1 = –Ω–µ—Ç –º–µ–Ω—é)', int),
            ('GRUB_DEFAULT', '–ü—É–Ω–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –º–µ–Ω—é GRUB', int),
        ]

        for attr, prompt, validator in config_items:
            current_value = getattr(self, attr)
            while True:
                try:
                    user_input = input(f"{prompt} [{current_value}]: ").strip()
                    if not user_input:
                        break
                    new_value = validator(user_input) if validator != bool else (user_input.lower() in ('y', 'yes'))
                    setattr(self, attr, new_value)
                    break
                except ValueError:
                    print(f"{Color.RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!{Color.END}")

        self._update_dynamic_names()
        self.save_config()
        print(f"{Color.GREEN}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!{Color.END}")

    def log(self, message: str, level: LogLevel = LogLevel.INFO) -> None:
        colors = {
            LogLevel.DEBUG: Color.DARKCYAN,
            LogLevel.INFO: Color.GREEN,
            LogLevel.WARNING: Color.YELLOW,
            LogLevel.ERROR: Color.RED,
            LogLevel.CRITICAL: Color.RED + Color.BOLD
        }
        prefix = {
            LogLevel.DEBUG: "[DEBUG]",
            LogLevel.INFO: "[INFO]",
            LogLevel.WARNING: "[WARNING]",
            LogLevel.ERROR: "[ERROR]",
            LogLevel.CRITICAL: "[CRITICAL]"
        }
        print(f"{colors.get(level, '')}{prefix.get(level, '')} {message}{Color.END}")


class BuildSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    def __init__(self, config: OSConfig):
        self.config = config
        self.start_time = time.time()

    def print_banner(self) -> None:
        banner = fr"""
{Color.PURPLE}{Color.BOLD}
   ___  ____   ____ ____  ___ ____ _____ _   _ __  __ 
  / _ \/ ___| / ___|  _ \|_ _|  _ \_   _| | | |  \/  |
 | | | \___ \| |   | |_) || || |_) || | | | | | |\/| |
 | |_| |___) | |___|  _ < | ||  __/ | | | |_| | |  | |
  \___/|____/ \____|_| \_\___|_|    |_|  \___/|_|  |_|
                                                      
{Color.END}
{Color.CYAN}OS Name:    {Color.BOLD}{self.config.NAME}{Color.END}
{Color.CYAN}Version:    {Color.BOLD}{self.config.VERSION}{Color.END}
{Color.CYAN}Author:     {Color.BOLD}{self.config.AUTHOR}{Color.END}
{Color.CYAN}Description:{Color.BOLD}{self.config.DESCRIPTION}{Color.END}
{Color.CYAN}Build Date: {Color.BOLD}{self.config.BUILD_DATE}{Color.END}
{Color.CYAN}Target:     {Color.BOLD}{self.config.TARGET}{Color.END}
{Color.CYAN}Arch:       {Color.BOLD}{self.config.ARCH}{Color.END}
"""
        print(banner)

    def ensure_dir(self, path: str) -> None:
        Path(path).mkdir(parents=True, exist_ok=True)
        self.config.log(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {path} —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞", LogLevel.DEBUG)

    def find_sources(self, extensions: Tuple[str, ...] = ('.c', '.S', '.asm')) -> List[str]:
        sources = []
        exclude_files = {BOOT_ASM}

        for directory in self.config.SOURCE_DIRS:
            for root, _, files in os.walk(directory):
                for file in files:
                    if file.endswith(extensions) and file not in exclude_files:
                        full_path = os.path.join(root, file)
                        sources.append(full_path)
                        self.config.log(f"–î–æ–±–∞–≤–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {full_path}", LogLevel.DEBUG)

        self.config.log(f"–ù–∞–π–¥–µ–Ω–æ {len(sources)} –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", LogLevel.INFO)
        return sources

    def compile_sources(self, sources: List[str], obj_dir: str) -> List[str]:
        objects = []
        include_flags = ' '.join(f'-I{inc}' for inc in self.config.INCLUDES)

        for src in sources:
            obj = os.path.join(obj_dir, f"{Path(src).stem}.o")
            objects.append(obj)

            if os.path.exists(obj) and os.path.getmtime(obj) >= os.path.getmtime(src):
                continue

            cmd = f"{self.config.CC} {self.config.CFLAGS} {include_flags} -c {src} -o {obj}"
            self.config.log(f"–ö–æ–º–ø–∏–ª—è—Ü–∏—è: {src}", LogLevel.INFO)
            try:
                subprocess.run(cmd, shell=True, check=True)
            except subprocess.CalledProcessError as e:
                self.config.log(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ {src}: {e}", LogLevel.ERROR)
                sys.exit(1)

        return objects

    def link_kernel(self, objects: List[str], output: str, linker_script: str) -> None:
        cmd = (
            f"{self.config.CC} {self.config.LDFLAGS} -T {linker_script} "
            f"-o {output} {' '.join(objects)}"
        )
        self.config.log(f"–õ–∏–Ω–∫–æ–≤–∫–∞ —è–¥—Ä–∞ -> {output}", LogLevel.INFO)
        try:
            subprocess.run(cmd, shell=True, check=True)
        except subprocess.CalledProcessError as e:
            self.config.log(f"–û—à–∏–±–∫–∞ –ª–∏–Ω–∫–æ–≤–∫–∏: {e}", LogLevel.ERROR)
            sys.exit(1)

        self.config.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ Multiboot2 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", LogLevel.INFO)
        try:
            result = subprocess.run(
                [self.config.GRUB_FILE, '--is-x86-multiboot2', output],
                capture_output=True
            )
            if result.returncode != 0:
                self.config.log("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Multiboot2 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º!", LogLevel.WARNING)
        except Exception:
            pass

    def create_kernel_binary(self, elf_kernel: str, bin_kernel: str) -> None:
        if not os.path.exists(elf_kernel):
            self.config.log(f"ELF —Ñ–∞–π–ª —è–¥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {elf_kernel}", LogLevel.ERROR)
            return

        if os.path.exists(bin_kernel) and os.path.getmtime(bin_kernel) >= os.path.getmtime(elf_kernel):
            self.config.log(f"–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª–µ–Ω: {bin_kernel}", LogLevel.DEBUG)
            return

        self.config.log(f"–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {bin_kernel}", LogLevel.INFO)
        cmd = f"{self.config.OBJCOPY} -O binary {elf_kernel} {bin_kernel}"
        try:
            subprocess.run(cmd, shell=True, check=True)
            self.config.log(f"–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {bin_kernel}", LogLevel.INFO)
        except subprocess.CalledProcessError as e:
            self.config.log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .bin: {e}", LogLevel.ERROR)
            sys.exit(1)
            
    def create_grub_cfg(self, grub_cfg_path: str) -> None:
        """
        –°–æ–∑–¥–∞—ë—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π grub.cfg, –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥.
        """
        if os.path.exists(grub_cfg_path):
            self.config.log(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π GRUB –∫–æ–Ω—Ñ–∏–≥: {grub_cfg_path}", LogLevel.INFO)
            return

        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        grub_content = f"""
    # === GRUB CONFIG FOR {self.config.NAME.upper()} ===
    # –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    # –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é.
    # –°–ª–µ–¥—É—é—â–∏–µ —Å–±–æ—Ä–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –≤–µ—Ä—Å–∏—é.

    timeout={self.config.GRUB_TIMEOUT}
    default={self.config.GRUB_DEFAULT}

    menuentry "{self.config.NAME} OS v{self.config.VERSION}" {{
        multiboot2 /boot/{self.config.ELF_KERNEL}
        boot
    }}
    """

        try:
            self.ensure_dir(os.path.dirname(grub_cfg_path))
            with open(grub_cfg_path, 'w') as f:
                f.write(grub_content.strip() + '\n')
            self.config.log(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π GRUB –∫–æ–Ω—Ñ–∏–≥: {grub_cfg_path}", LogLevel.INFO)
            self.config.log(f"üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é!", LogLevel.INFO)
        except Exception as e:
            self.config.log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è grub.cfg: {e}", LogLevel.ERROR)
            sys.exit(1)

    def create_iso(self, kernel_bin: str, iso_dir: str, grub_cfg_src: str, iso_image: str) -> None:
        boot_dir = f"{iso_dir}/boot"
        grub_dir = f"{boot_dir}/grub"

        self.ensure_dir(boot_dir)
        self.ensure_dir(grub_dir)

        # –ö–æ–ø–∏—Ä—É–µ–º .efi (ELF) –≤–º–µ—Å—Ç–æ .bin
        kernel_elf = self.config.get_kernel_output()
        if not os.path.exists(kernel_elf):
            self.config.log(f"–§–∞—Ç–∞–ª—å–Ω–æ: ELF —è–¥—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {kernel_elf}", LogLevel.CRITICAL)
            sys.exit(1)

        shutil.copy(kernel_elf, f"{boot_dir}/{self.config.ELF_KERNEL}")  # deer.efi

        # –ö–æ–ø–∏—Ä—É–µ–º grub.cfg
        shutil.copy(grub_cfg_src, f"{grub_dir}/{GRUB_CONFIG}")

        self.config.log(f"–°–æ–∑–¥–∞–Ω–∏–µ ISO: {iso_image}", LogLevel.INFO)
        try:
            subprocess.run(
                f"{self.config.GRUB_MKRESCUE} -o {iso_image} {iso_dir}",
                shell=True, check=True
            )
        except subprocess.CalledProcessError as e:
            self.config.log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ISO: {e}", LogLevel.ERROR)
            sys.exit(1)

    def run_qemu(self, iso_image: str, clean_after: bool = False, gdb: bool = False) -> None:
        if not os.path.exists(iso_image):
            demo_iso_pattern = f"{self.config.DEMO_ISO_DIR}/{self.config.NAME.lower()}-v*"
            demo_isos = sorted(glob.glob(demo_iso_pattern), reverse=True)
            if demo_isos:
                iso_image = demo_isos[0]
                self.config.log(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π ISO: {iso_image}", LogLevel.INFO)
            else:
                self.config.log("ISO –Ω–µ –Ω–∞–π–¥–µ–Ω", LogLevel.ERROR)
                return

        qemu_cmd = [
            self.config.QEMU_CMD,
            '-m', self.config.QEMU_MEMORY,
            '-cdrom', iso_image,
            '-d', 'guest_errors',
            '-no-reboot',
            '-name', f"{self.config.NAME} v{self.config.VERSION}"
        ]

        if gdb:
            qemu_cmd += ['-s', '-S']
            self.config.log(f"QEMU –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏: target remote localhost:{self.config.QEMU_GDB_PORT}", LogLevel.INFO)

        if self.config.QEMU_SERIAL:
            qemu_cmd += ['-serial', 'stdio']

        if self.config.QEMU_AUDIO:
            qemu_cmd += ['-audiodev', 'pa,id=audio0', '-machine', 'pcspk-audiodev=audio0']

        self.config.log("–ó–∞–ø—É—Å–∫ QEMU...", LogLevel.INFO)
        try:
            subprocess.run(qemu_cmd, check=True)
        except subprocess.CalledProcessError as e:
            self.config.log(f"QEMU –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}", LogLevel.ERROR)
        except KeyboardInterrupt:
            self.config.log("QEMU –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", LogLevel.INFO)
        finally:
            if clean_after:
                self.clean()

    def generate_file_tree(self, path: str = '.', indent: str = '', last: bool = True, output_file=None) -> None:
        prefix = indent + ('‚îî‚îÄ‚îÄ ' if last else '‚îú‚îÄ‚îÄ ')
        name = os.path.basename(path)

        if os.path.isdir(path):
            output_file.write(f"{prefix}[–ü–ê–ü–ö–ê {name.upper()}]\n")
        else:
            output_file.write(f"{prefix}[–§–ê–ô–õ {name.upper()}]\n")

        if os.path.isdir(path):
            items = sorted(os.listdir(path))
            for i, item in enumerate(items):
                is_last = i == len(items) - 1
                new_indent = indent + ('    ' if last else '‚îÇ   ')
                self.generate_file_tree(os.path.join(path, item), new_indent, is_last, output_file)

                file_path = os.path.join(path, item)
                if os.path.isfile(file_path) and item.endswith(('.c', '.h', '.ld', '.S', '.txt')):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read().strip()
                            if content:
                                output_file.write(f"{new_indent}    [–°–û–î–ï–†–ñ–ò–ú–û–ï]\n")
                                for line in content.split('\n'):
                                    output_file.write(f"{new_indent}    {line}\n")
                    except Exception as e:
                        output_file.write(f"{new_indent}    [–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–ê: {str(e)}]\n")

    def save_file_tree(self) -> None:
        tree_file = self.config.TREE_FILE
        self.config.log(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ –≤ {tree_file}", LogLevel.INFO)
        with open(tree_file, 'w', encoding='utf-8') as f:
            f.write(f"–î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –û–° {self.config.NAME} v{self.config.VERSION}\n")
            f.write(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("=" * 50 + "\n\n")
            self.generate_file_tree(output_file=f)
        self.config.log(f"–î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {tree_file}", LogLevel.INFO)

    def print_file_tree(self) -> None:
        self.save_file_tree()
        with open(self.config.TREE_FILE, 'r', encoding='utf-8') as f:
            print(f.read())

    def clean(self) -> None:
        dirs_to_clean = [self.config.BUILD_DIR, self.config.ISO_DIR]
        files_to_clean = [
            self.config.get_iso_image(),
            self.config.get_kernel_output(),
            self.config.get_kernel_binary()
        ]
        
        self.config.log("–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å–±–æ—Ä–∫–∏", LogLevel.INFO)
        for directory in dirs_to_clean:
            if os.path.exists(directory):
                shutil.rmtree(directory)
                self.config.log(f"–£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}", LogLevel.DEBUG)
        
        for file_pattern in files_to_clean:
            if os.path.exists(file_pattern):
                os.remove(file_pattern)
                self.config.log(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_pattern}", LogLevel.DEBUG)

    def check_tools(self) -> None:
        required_tools = [
            self.config.CC,
            self.config.LD,
            self.config.OBJCOPY,
            self.config.GRUB_FILE,
            self.config.GRUB_MKRESCUE,
            self.config.QEMU_CMD
        ]
        
        self.config.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–±–æ—Ä–∫–∏", LogLevel.INFO)
        for tool in required_tools:
            try:
                subprocess.run(f"which {tool}", shell=True, check=True, 
                             stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            except subprocess.CalledProcessError:
                self.config.log(f"–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool}", LogLevel.ERROR)
                sys.exit(1)

    def build(self, debug: bool = False, versioned_iso: bool = False) -> None:
        self.print_banner()
        
        if debug:
            self.config.CFLAGS += ' -g -DDEBUG'
            self.config.log("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω", LogLevel.INFO)
        
        self.check_tools()
        
        self.ensure_dir(self.config.BUILD_DIR)
        self.ensure_dir(self.config.BIN_DIR)
        self.ensure_dir(self.config.ISO_DIR)
        self.ensure_dir(self.config.DEMO_ISO_DIR)
        
        try:
            if not os.path.exists('os_config.json'):
                self.config.create_default_config('os_config.json')
            
            self.create_grub_cfg(self.config.GRUB_CFG)

            sources = self.find_sources()
            objects = self.compile_sources(sources, self.config.BUILD_DIR)
            
            # === –ö–æ–º–ø–∏–ª—è—Ü–∏—è –û–î–ù–û–ì–û boot.s (—Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º mb2) ===
            boot_src = f"src/kernel/{BOOT_ASM}"
            obj = os.path.join(self.config.BUILD_DIR, "boot.o")

            if not os.path.exists(boot_src):
                self.config.log(f"–§–∞—Ç–∞–ª—å–Ω–æ: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª {boot_src}", LogLevel.CRITICAL)
                sys.exit(1)

            cmd = (
                f"{self.config.CC} {self.config.CFLAGS} "
                f"-x assembler-with-cpp -c {boot_src} -o {obj}"
            )
            self.config.log(f"–ö–æ–º–ø–∏–ª—è—Ü–∏—è: {boot_src}", LogLevel.INFO)
            try:
                subprocess.run(cmd, shell=True, check=True)
                objects.insert(0, obj)  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!
            except subprocess.CalledProcessError as e:
                self.config.log(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ boot.s: {e}", LogLevel.ERROR)
                sys.exit(1)

            elf_kernel_path = self.config.get_kernel_output()
            self.link_kernel(
                objects=objects,
                output=elf_kernel_path,
                linker_script=f"src/kernel/{LINKER_SCRIPT}"
            )

            bin_kernel_path = self.config.get_kernel_binary()
            self.create_kernel_binary(elf_kernel_path, bin_kernel_path)

            iso_path = self.config.get_iso_image(versioned=versioned_iso)
            
            self.create_iso(
                kernel_bin=bin_kernel_path,
                iso_dir=self.config.ISO_DIR,
                grub_cfg_src=self.config.GRUB_CFG,
                iso_image=iso_path
            )
            
            if versioned_iso:
                self.config.log(f"ISO —Å–æ–∑–¥–∞–Ω: {iso_path}", LogLevel.INFO)
            else:
                demo_iso = self.config.get_iso_image(versioned=True)
                shutil.copy(iso_path, demo_iso)
                self.config.log(f"ISO —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {demo_iso}", LogLevel.INFO)
            
            self.save_file_tree()
            
            build_time = time.time() - self.start_time
            self.config.log(f"–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {build_time:.2f} —Å–µ–∫—É–Ω–¥", LogLevel.INFO)
            self.config.log(f"–§–∞–π–ª—ã —è–¥—Ä–∞: {elf_kernel_path}, {bin_kernel_path}", LogLevel.INFO)
            
        except KeyboardInterrupt:
            self.config.log("–°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", LogLevel.ERROR)
            sys.exit(1)


def main() -> None:
    config = OSConfig()
    config.load_config()
    config._update_dynamic_names()

    parser = argparse.ArgumentParser(
        description=f'{config.NAME} OS Build System',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('--clean', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏')
    parser.add_argument('--run', action='store_true', help='–°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ QEMU')
    parser.add_argument('--debug', action='store_true', help='–°–±–æ—Ä–∫–∞ —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏')
    parser.add_argument('--demo', action='store_true', 
                       help='–°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–π ISO –≤ –ø–∞–ø–∫–µ demo_iso')
    parser.add_argument('--name', type=str, help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –û–°')
    parser.add_argument('--version', type=str, help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –û–°')
    parser.add_argument('--author', type=str, help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –û–°')
    parser.add_argument('--description', type=str, help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –û–°')
    parser.add_argument('--save-config', action='store_true', 
                       help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    parser.add_argument('--edit-config', action='store_true', 
                       help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--clean-after-run', action='store_true', 
                       help='–û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ QEMU')
    parser.add_argument('--gdb', action='store_true', 
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å QEMU –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ GDB')
    parser.add_argument('--tree', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –û–° –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª')
    parser.add_argument('--grub-timeout', type=int, help='–¢–∞–π–º–∞—É—Ç –º–µ–Ω—é GRUB –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--grub-default', type=int, help='–ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    parser.add_argument('--no-grub-menu', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –º–µ–Ω—é GRUB (–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫)')
    
    args = parser.parse_args()
    
    if args.edit_config:
        config.edit_config_interactive()
        return
    
    updated = False

    if args.name:
        config.NAME = args.name
        config._update_dynamic_names()
        config.save_config()
        config.log(f"‚úÖ –ò–º—è –û–° —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ '{config.NAME}'", LogLevel.INFO)
        updated = True

    if args.version:
        config.VERSION = args.version
        config.save_config()
        config.log(f"‚úÖ –í–µ—Ä—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {config.VERSION}", LogLevel.INFO)
        updated = True

    if args.author:
        config.AUTHOR = args.author
        config.save_config()
        updated = True

    if args.description:
        config.DESCRIPTION = args.description
        config.save_config()
        updated = True

    if args.grub_timeout is not None:
        config.GRUB_TIMEOUT = args.grub_timeout
        config.save_config()
        config.log(f"‚úÖ –¢–∞–π–º–∞—É—Ç GRUB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {config.GRUB_TIMEOUT} —Å–µ–∫", LogLevel.INFO)
        updated = True

    if args.no_grub_menu:
        config.GRUB_TIMEOUT = -1
        config.save_config()
        config.log("‚úÖ –ú–µ–Ω—é GRUB –æ—Ç–∫–ª—é—á–µ–Ω–æ (–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫)", LogLevel.INFO)
        updated = True

    if args.grub_default is not None:
        config.GRUB_DEFAULT = args.grub_default
        config.save_config()
        config.log(f"‚úÖ –ü—É–Ω–∫—Ç –º–µ–Ω—é GRUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.GRUB_DEFAULT}", LogLevel.INFO)
        updated = True

    if args.clean_after_run:
        config.QEMU_CLEAN_AFTER_RUN = True
        config.save_config()

    if args.save_config or updated:
        config.save_config()
        return
    
    builder = BuildSystem(config)
    
    if args.tree:
        builder.print_file_tree()
        return
    
    if args.clean:
        builder.clean()
        return
    
    builder.build(
        debug=args.debug,
        versioned_iso=args.demo or args.run
    )
    
    if args.run:
        iso_path = config.get_iso_image(versioned=True)
        if not os.path.exists(iso_path):
            iso_path = config.get_iso_image()
        
        builder.run_qemu(
            iso_path,
            clean_after=args.clean_after_run or config.QEMU_CLEAN_AFTER_RUN,
            gdb=args.gdb
        )


if __name__ == '__main__':
    main()