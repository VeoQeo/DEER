Дерево файлов ОС DEER v0.6.0
Сгенерировано: 2025-10-09 20:15:12
==================================================

└── [ПАПКА .]
    ├── [ПАПКА .GIT]
    │   ├── [ФАЙЛ HEAD]
    │   ├── [ФАЙЛ CONFIG]
    │   ├── [ФАЙЛ DESCRIPTION]
    │   ├── [ПАПКА HOOKS]
    │   │   ├── [ФАЙЛ APPLYPATCH-MSG.SAMPLE]
    │   │   ├── [ФАЙЛ COMMIT-MSG.SAMPLE]
    │   │   ├── [ФАЙЛ FSMONITOR-WATCHMAN.SAMPLE]
    │   │   ├── [ФАЙЛ POST-UPDATE.SAMPLE]
    │   │   ├── [ФАЙЛ PRE-APPLYPATCH.SAMPLE]
    │   │   ├── [ФАЙЛ PRE-COMMIT.SAMPLE]
    │   │   ├── [ФАЙЛ PRE-MERGE-COMMIT.SAMPLE]
    │   │   ├── [ФАЙЛ PRE-PUSH.SAMPLE]
    │   │   ├── [ФАЙЛ PRE-REBASE.SAMPLE]
    │   │   ├── [ФАЙЛ PRE-RECEIVE.SAMPLE]
    │   │   ├── [ФАЙЛ PREPARE-COMMIT-MSG.SAMPLE]
    │   │   ├── [ФАЙЛ PUSH-TO-CHECKOUT.SAMPLE]
    │   │   ├── [ФАЙЛ SENDEMAIL-VALIDATE.SAMPLE]
    │   │   └── [ФАЙЛ UPDATE.SAMPLE]
    │   ├── [ФАЙЛ INDEX]
    │   ├── [ПАПКА INFO]
    │   │   └── [ФАЙЛ EXCLUDE]
    │   ├── [ПАПКА LOGS]
    │   │   ├── [ФАЙЛ HEAD]
    │   │   └── [ПАПКА REFS]
    │   │       ├── [ПАПКА HEADS]
    │   │       │   └── [ФАЙЛ MAIN]
    │   │       └── [ПАПКА REMOTES]
    │   │           └── [ПАПКА ORIGIN]
    │   │               └── [ФАЙЛ HEAD]
    │   ├── [ПАПКА OBJECTS]
    │   │   ├── [ПАПКА INFO]
    │   │   └── [ПАПКА PACK]
    │   │       ├── [ФАЙЛ PACK-AC990E3E406515931E113641648246746FDF665A.IDX]
    │   │       ├── [ФАЙЛ PACK-AC990E3E406515931E113641648246746FDF665A.PACK]
    │   │       └── [ФАЙЛ PACK-AC990E3E406515931E113641648246746FDF665A.REV]
    │   ├── [ФАЙЛ PACKED-REFS]
    │   └── [ПАПКА REFS]
    │       ├── [ПАПКА HEADS]
    │       │   └── [ФАЙЛ MAIN]
    │       ├── [ПАПКА REMOTES]
    │       │   └── [ПАПКА ORIGIN]
    │       │       └── [ФАЙЛ HEAD]
    │       └── [ПАПКА TAGS]
    ├── [ФАЙЛ LICENSE]
    ├── [ФАЙЛ OS-TREE.TXT]
    ├── [ПАПКА BIN]
    │   ├── [ФАЙЛ DEER.BIN]
    │   └── [ФАЙЛ DEER.KERNEL]
    ├── [ПАПКА BUILD]
    │   ├── [ФАЙЛ BOOT.O]
    │   ├── [ФАЙЛ KERNEL.O]
    │   └── [ФАЙЛ MB2.O]
    ├── [ФАЙЛ BUILD.PY]
    ├── [ПАПКА DEMO_ISO]
    │   └── [ФАЙЛ DEER-V0.6.0-20251009-201512.ISO]
    ├── [ПАПКА INCLUDE]
    │   └── [ФАЙЛ STDINT.H]
    │       [СОДЕРЖИМОЕ]
    │       #ifndef __STDINT_H
    │       #define __STDINT_H
    │       
    │       typedef unsigned char uchar_t;
    │       typedef unsigned short ushort_t;
    │       typedef unsigned int uint_t;
    │       typedef unsigned long ulong_t;
    │       typedef unsigned char  uint8_t;
    │       typedef unsigned short uint16_t;
    │       typedef unsigned int   uint32_t;
    │       typedef unsigned long long uint64_t;
    │       
    │       #endif
    ├── [ПАПКА ISODIR]
    │   └── [ПАПКА BOOT]
    │       ├── [ФАЙЛ DEER.BIN]
    │       ├── [ФАЙЛ DEER.KERNEL]
    │       └── [ПАПКА GRUB]
    │           └── [ФАЙЛ GRUB.CFG]
    ├── [ФАЙЛ OS_CONFIG.JSON]
    └── [ПАПКА SRC]
        ├── [ФАЙЛ BOOT.S]
            [СОДЕРЖИМОЕ]
            .section .rodata
            	.align	4
            gdt64:
            	.quad	0 
            
            gdt64_code_entry:
            	.set	gdt64_code_seg, gdt64_code_entry - gdt64
            	.quad	(1<<44) | (1<<47) | (1<<41) | (1<<43) | (1<<53)
            gdt64_data_entry:
            	.set	gdt64_data_seg, gdt64_data_entry - gdt64
            	.quad	(1<<44) | (1<<47) | (1<<41) 
            
            gdt64_pointer:
            	.set	gdt64_limit, gdt64_pointer - gdt64 - 1
            	.word	gdt64_limit
            	.quad	gdt64
            
            	.global _start
            	.extern kernel_main
            
            	.section .text
            	.code32
            _start:
            	movl	$stack_top, %esp
            
            	movl	%ebx, %edi
            
            	call	check_multiboot
            	call	check_cpuid
            	call	check_long_mode
            
            	call	set_up_page_tables
            	call	enable_paging
            	call	set_up_SSE
            
            	lgdt	(gdt64_pointer)
            
            	movw	$gdt64_data_seg, %ax
            	movw	%ax, %ss
            	movw	%ax, %ds
            	movw	%ax, %es
            
            	ljmp	$gdt64_code_seg, $kernel_main
            
            set_up_page_tables:
            	mov	$p4_table, %eax
            	orl	$0b11, %eax		
            	movl	%eax, (p4_table + 511 * 8)
            
            	movl	$p3_table, %eax
            	orl	$0b11, %eax		
            	movl	%eax, (p4_table)
            
            	movl	$p2_table, %eax
            	orl	$0b11, %eax		
            	mov	%eax, (p3_table)
            
            	movl	$0, %ecx		
            map_p2_table:
            	movl	$0x200000, %eax		
            	mul	%ecx		
            	orl	$0b10000011, %eax
            	movl	%eax, p2_table(,%ecx,8) 
            
            	inc	%ecx			
            	cmp	$512, %ecx		
            	jne	map_p2_table		
            
            	ret
            
            enable_paging:
            	movl	$p4_table, %eax
            	movl	%eax, %cr3
            
            	movl	%cr4, %eax
            	orl	$1 << 5, %eax
            	mov	%eax, %cr4
            
            	mov	$0xC0000080, %ecx
            	rdmsr
            	orl	$1 << 8, %eax
            	wrmsr
            
            	movl	%cr0, %eax
            	orl	$1 << 31, %eax
            	mov	%eax, %cr0
            
            	ret
            
            error:
            	movl	$0x4f524f45, (0xb8000)
            	movl	$0x4f3a4f52, (0xb8004)
            	movl	$0x4f204f20, (0xb8008)
            	movb	%al, (0xb800a)
            	hlt
            
            check_multiboot:
            	cmpl	$0x36d76289, %eax
            	jne	no_multiboot
            	ret
            
            no_multiboot:
            	movb	$'0', %al
            	jmp	error
            
            check_cpuid:
            	pushf				
            	pop	%eax			
            	mov	%eax, %ecx		
            	xor	$1 << 21, %eax		
            	push	%eax			
            	popf				
            	pushf				
            	pop	%eax			
            	push	%ecx			
            	popf				
            	xor	%ecx, %eax		
            
            	jz	no_cpuid		
            	ret				
            
            no_cpuid:
            	mov	$'1', %al
            	jmp	error
            
            check_long_mode:
            	movl	$0x80000000, %eax	
            	cpuid				
            	cmp	$0x80000001, %eax	
            	jb	no_long_mode		
            	movl	$0x80000001, %eax	
            	cpuid				
            	test	$1 << 29, %edx		
            					
            	jz	no_long_mode		
            	ret
            
            no_long_mode:
            	mov	$'2', %al
            	jmp	error
            
            set_up_SSE:
            	movl	$0x1, %eax
            	cpuid
            	testl	$1<<25, %edx
            	jz	no_SSE
            
            	movl	%cr0, %eax
            	andw	$0xFFFB, %ax		
            	orw	$0x2, %ax		
            	movl	%eax, %cr0
            	movl	%cr4, %eax
            	orw	$3 << 9, %ax		
            	movl	%eax, %cr4
            	ret
            
            no_SSE:
            	movb	$'a', %al
            	jmp	error
            
            	.section .bss
            	.align 4096
            p4_table:
            	.skip 4096
            p3_table:
            	.skip 4096
            p2_table:
            	.skip 4096
            stack_bottom:
            	.skip 4096 * 2
            stack_top:
        ├── [ФАЙЛ GRUB.CFG]
        ├── [ФАЙЛ KERNEL.C]
            [СОДЕРЖИМОЕ]
            #include <stdint.h>
            
            #define VGA_ADDRESS 0xB8000
            #define VGA_WIDTH 80
            #define VGA_HEIGHT 25
            
            #define WHITE_ON_BLACK 0x0F
            #define RED_ON_BLACK 0x0C
            #define GREEN_ON_BLACK 0x0A
            
            // Функция очистки экрана
            void clear_screen() {
                volatile uint16_t* vga = (uint16_t*)VGA_ADDRESS;
                uint16_t blank = ' ' | (WHITE_ON_BLACK << 8);
            
                for (uint32_t i = 0; i < VGA_WIDTH * VGA_HEIGHT; i++) {
                    vga[i] = blank;
                }
            }
            
            void kernel_main(void) {
                clear_screen();
            
                volatile uint16_t* vga = (uint16_t*)VGA_ADDRESS;
                vga[0] = 'A' | (RED_ON_BLACK << 8);
                vga[1] = 'B' | (GREEN_ON_BLACK << 8);
                vga[2] = 'C' | (WHITE_ON_BLACK << 8);
            	vga[3] = ' ' | (WHITE_ON_BLACK << 8);
                vga[4] = '6' | (WHITE_ON_BLACK << 8);
                vga[5] = '4' | (WHITE_ON_BLACK << 8);
            	vga[6] = ' ' | (WHITE_ON_BLACK << 8);
                vga[7] = 'B' | (WHITE_ON_BLACK << 8);
                vga[8] = 'I' | (WHITE_ON_BLACK << 8);
            	vga[9] = 'N' | (WHITE_ON_BLACK << 8);
            
                while(1); // чтобы QEMU не закрывался
            }
        ├── [ФАЙЛ LINK.LD]
            [СОДЕРЖИМОЕ]
            ENTRY(_start)
            
            SECTIONS {
              . = 1M;
            
              .boot BLOCK(4K) : ALIGN(4K) {
                KEEP(*(.multiboot))
              }
            
              .text BLOCK(4K) : ALIGN(4K) {
                *(.text)
              }
            
              .data BLOCK(4K) : ALIGN(4K) {
                *(.data)
              }
            
              .bss BLOCK(4K) : ALIGN(4K) {
                *(COMMON)
                *(.bss)
              }
            
              .stack BLOCK(4K) : ALIGN(4K) {
                *(.bootstrap_stack)
              }
            }
        └── [ФАЙЛ MB2.S]
            [СОДЕРЖИМОЕ]
            .set		MAGIC, 0xE85250D6	
            	.set		FLAGS, 0		
            	.set		CHECKSUM, -(MAGIC + FLAGS + (mbh_end - mbh_start))
            
            	.section	.multiboot
            	.align		4
            mbh_start:
            	.long		MAGIC
            	.long		FLAGS
            	.long		mbh_end - mbh_start
            	.long		CHECKSUM
            
            	.word		0					
            	.word		0					
            	.long		8					
            mbh_end:
